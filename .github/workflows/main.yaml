name: Deploy Pre-Built Rust API to EC2 (On-Instance Deployment)

on:
  push:
    branches: [ "main" ] # This workflow triggers on pushes to the 'main' branch.

jobs:
  deploy:
    runs-on: ubuntu-latest # The job will run on a fresh Ubuntu runner provided by GitHub Actions.
    steps:
      - name: Checkout code on runner (for context, not direct build/copy)
        uses: actions/checkout@v3 # Checks out your repository code into the runner.

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # Configures AWS credentials for interacting with AWS services.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Your AWS Access Key ID, stored as a GitHub secret.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Your AWS Secret Access Key, stored as a GitHub secret.
          aws-region: ${{ secrets.AWS_REGION }} # Your AWS region, stored as a GitHub secret.

      - name: Connect to EC2 instance, Clone Repo, Deploy, and Run API
        uses: appleboy/ssh-action@master # Uses the SSH action to connect to your EC2 instance and run commands.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REMOTE_REPO_URL="https://github.com/EduardoOsteicoechea/blazing_rust_000.git"
            TEMP_CLONE_DIR="/tmp/blazing_rust_000"
            FINAL_BINARY_PATH="/usr/local/bin/blazing_rust_000"

            echo "Clearing Nginx cache..."
            sudo rm -rf /var/cache/nginx/*

            echo "Checking and killing processes on port 7000..."
            if command -v lsof >/dev/null 2>&1; then
              if sudo lsof -ti:7000; then
                echo "Killing processes on port 7000 using lsof..."
                sudo kill -9 $(sudo lsof -ti:7000)
              else
                echo "No process found listening on port 7000 using lsof."
              fi
            else
              echo "lsof not found, trying netstat..."
              if sudo netstat -tuln | grep :7000; then
                echo "Killing processes on port 7000 using netstat..."
                sudo kill -9 $(sudo netstat -tulnp | grep :7000 | awk '{print $7}' | cut -d'/' -f1)
              else
                echo "No process found listening on port 7000 using netstat."
              fi
            fi

            echo "Cleaning up any previous temporary cloned directory ($TEMP_CLONE_DIR)..."
            sudo rm -rf "$TEMP_CLONE_DIR"

            git clone "$REMOTE_REPO_URL" "$TEMP_CLONE_DIR"

            if [ ! -d "$TEMP_CLONE_DIR" ]; then
                echo "Error: Failed to clone repository $REMOTE_REPO_URL"
                exit 1
            fi

            SOURCE_BINARY_IN_REPO="$TEMP_CLONE_DIR/target/release/blazing_rust_000"

            echo "Locating pre-built binary at: $SOURCE_BINARY_IN_REPO"
            if [ ! -f "$SOURCE_BINARY_IN_REPO" ]; then
                echo "Error: Pre-built binary NOT found at $SOURCE_BINARY_IN_REPO in the cloned repository."
                echo "Please ensure the 'target/release/blazing_rust_000' executable is committed to your repository."
                exit 1
            fi

            echo "Moving binary to $FINAL_BINARY_PATH and setting permissions..."
            sudo mv "$SOURCE_BINARY_IN_REPO" "$FINAL_BINARY_PATH"
            sudo chmod +x "$FINAL_BINARY_PATH" # Make the binary executable.

            echo "Cleaning up temporary cloned repository: $TEMP_CLONE_DIR"
            sudo rm -rf "$TEMP_CLONE_DIR" # Remove the cloned source code.

            echo "Starting Rust API on port 7000 in a detached screen session..."
            sudo screen -S blazing_rust_000 "$FINAL_BINARY_PATH"

            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            echo "Reloading Nginx configuration..."
            sudo systemctl reload nginx 

      - name: Wait for deployment
        run: |
          echo "Waiting 5 seconds for services to come online..."
          sleep 5
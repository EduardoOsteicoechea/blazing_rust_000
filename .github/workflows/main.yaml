name: Deploy Pre-Built Rust API to EC2 (Direct Copy - No Build)

on:
  push:
    branches: [ "main" ] # This workflow triggers on pushes to the 'main' branch.

jobs:
  deploy:
    runs-on: ubuntu-latest # The job will run on a fresh Ubuntu runner provided by GitHub Actions.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository code into the runner.
        # IMPORTANT: This step makes 'target/release/blazing_rust_000'
        # available on the runner *only if* it has been committed to your Git repo.

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # Configures AWS credentials for interacting with AWS services.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Your AWS Access Key ID, stored as a GitHub secret.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Your AWS Secret Access Key, stored as a GitHub secret.
          aws-region: ${{ secrets.AWS_REGION }} # Your AWS region, stored as a GitHub secret.

      - name: Copy Pre-Built Rust binary to EC2 instance
        uses: appleboy/scp-action@master # Uses the SCP action to securely copy files to your EC2 instance.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Source path of the pre-built Rust binary on the runner.
          # This step will FAIL if 'target/release/blazing_rust_000' does not exist
          # in your repository's checked-out code on the runner.
          source: "target/release/blazing_rust_000"
          target: "/tmp" # Temporary destination path on the EC2 instance.
          overwrite: true # Overwrite existing file.

      - name: Connect to EC2 instance and Deploy API
        uses: appleboy/ssh-action@master # Uses the SSH action to connect to your EC2 instance and run commands.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            FINAL_BINARY_PATH="/usr/local/bin/blazing_rust_000"
            REMOTE_TEMP_BINARY="/tmp/blazing_rust_000"

            echo "Clearing Nginx cache..."
            sudo rm -rf /var/cache/nginx/*

            # Kill any existing process running on port 7000 to avoid conflicts.
            echo "Checking and killing processes on port 7000..."
            if command -v lsof >/dev/null 2>&1; then
              if sudo lsof -ti:7000; then
                echo "Killing processes on port 7000 using lsof..."
                sudo kill -9 $(sudo lsof -ti:7000)
              else
                echo "No process found listening on port 7000 using lsof."
              fi
            else
              echo "lsof not found, trying netstat..."
              if sudo netstat -tuln | grep :7000; then
                echo "Killing processes on port 7000 using netstat..."
                sudo kill -9 $(sudo netstat -tulnp | grep :7000 | awk '{print $7}' | cut -d'/' -f1)
              else
                echo "No process found listening on port 7000 using netstat."
              fi
            fi

            # Verify the binary exists in /tmp after copy before moving and running it.
            if [ -f "$REMOTE_TEMP_BINARY" ]; then
                echo "Pre-built executable found at $REMOTE_TEMP_BINARY. Moving and setting permissions..."
                sudo mv "$REMOTE_TEMP_BINARY" "$FINAL_BINARY_PATH"
                sudo chmod +x "$FINAL_BINARY_PATH" # Make the binary executable.
                
                echo "Starting Rust API on port 7000 in a detached screen session..."
                # Start the API using 'screen -dmS' to keep it running in the background.
                sudo screen -dmS blazing_rust_000 "$FINAL_BINARY_PATH"
                
                # Note: Ensure your Rust API code is configured to listen on port 7000.
                # This YAML starts the binary, but the port binding is controlled by the Rust application's code.
            else
                echo "Error: Pre-built executable NOT found at $REMOTE_TEMP_BINARY on EC2. Copy failed from runner."
                exit 1 # Fail the SSH step if the binary wasn't copied.
            fi

            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            echo "Reloading Nginx configuration..."
            sudo systemctl reload nginx 

      - name: Wait for deployment
        run: |
          echo "Waiting 5 seconds for services to come online..."
          sleep 5